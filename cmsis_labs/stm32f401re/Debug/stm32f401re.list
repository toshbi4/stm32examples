
stm32f401re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000438  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005cc  080005cc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005cc  080005cc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005cc  080005cc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005cc  080005cc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005cc  080005cc  000105cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005d0  080005d0  000105d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005d4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080005d8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080005d8  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012d0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002e0  00000000  00000000  00021304  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000078  00000000  00000000  000215e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000060  00000000  00000000  00021660  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000e4be  00000000  00000000  000216c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000006d1  00000000  00000000  0002fb7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00052b67  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00082db6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000130  00000000  00000000  00082e34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005b4 	.word	0x080005b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080005b4 	.word	0x080005b4

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3b01      	subs	r3, #1
 8000270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000274:	d301      	bcc.n	800027a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000276:	2301      	movs	r3, #1
 8000278:	e00f      	b.n	800029a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800027a:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <SysTick_Config+0x40>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3b01      	subs	r3, #1
 8000280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000282:	210f      	movs	r1, #15
 8000284:	f04f 30ff 	mov.w	r0, #4294967295
 8000288:	f7ff ffc2 	bl	8000210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <SysTick_Config+0x40>)
 800028e:	2200      	movs	r2, #0
 8000290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000292:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <SysTick_Config+0x40>)
 8000294:	2207      	movs	r2, #7
 8000296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000298:	2300      	movs	r3, #0
}
 800029a:	4618      	mov	r0, r3
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010

080002a8 <SysTick_Handler>:

#define APB1_FREQ 35000000
#define BAUDRATE 115200

void SysTick_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
	counter++;
 80002ac:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <SysTick_Handler+0x70>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	3301      	adds	r3, #1
 80002b2:	4a19      	ldr	r2, [pc, #100]	; (8000318 <SysTick_Handler+0x70>)
 80002b4:	6013      	str	r3, [r2, #0]
	if(counter>=SysTicksClk){
 80002b6:	4b18      	ldr	r3, [pc, #96]	; (8000318 <SysTick_Handler+0x70>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f643 2297 	movw	r2, #14999	; 0x3a97
 80002be:	4293      	cmp	r3, r2
 80002c0:	d924      	bls.n	800030c <SysTick_Handler+0x64>
		counter=0;
 80002c2:	4b15      	ldr	r3, [pc, #84]	; (8000318 <SysTick_Handler+0x70>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
		if (var == 1){
 80002c8:	4b14      	ldr	r3, [pc, #80]	; (800031c <SysTick_Handler+0x74>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d10e      	bne.n	80002ee <SysTick_Handler+0x46>
			var = 0;
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <SysTick_Handler+0x74>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR |= (1<<RED_LED_PIN);
 80002d6:	4b12      	ldr	r3, [pc, #72]	; (8000320 <SysTick_Handler+0x78>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a12      	ldr	r2, [pc, #72]	; (8000324 <SysTick_Handler+0x7c>)
 80002dc:	7812      	ldrb	r2, [r2, #0]
 80002de:	4611      	mov	r1, r2
 80002e0:	2201      	movs	r2, #1
 80002e2:	408a      	lsls	r2, r1
 80002e4:	4611      	mov	r1, r2
 80002e6:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <SysTick_Handler+0x78>)
 80002e8:	430b      	orrs	r3, r1
 80002ea:	6153      	str	r3, [r2, #20]
			var = 1;
			GPIOC->ODR &= ~(1<<RED_LED_PIN);
		}
	}

}
 80002ec:	e00e      	b.n	800030c <SysTick_Handler+0x64>
			var = 1;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <SysTick_Handler+0x74>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1<<RED_LED_PIN);
 80002f4:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <SysTick_Handler+0x78>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <SysTick_Handler+0x7c>)
 80002fa:	7812      	ldrb	r2, [r2, #0]
 80002fc:	4611      	mov	r1, r2
 80002fe:	2201      	movs	r2, #1
 8000300:	408a      	lsls	r2, r1
 8000302:	43d2      	mvns	r2, r2
 8000304:	4611      	mov	r1, r2
 8000306:	4a06      	ldr	r2, [pc, #24]	; (8000320 <SysTick_Handler+0x78>)
 8000308:	400b      	ands	r3, r1
 800030a:	6153      	str	r3, [r2, #20]
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	20000020 	.word	0x20000020
 800031c:	20000024 	.word	0x20000024
 8000320:	40020800 	.word	0x40020800
 8000324:	20000000 	.word	0x20000000

08000328 <ClocksInit>:

void ClocksInit(){
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	//RCC->APB1ENR |= 1<<28;
	//PWR->CR |= 3<<14;

	/*1. Set flash latency*/
	FLASH->ACR=FLASH_ACR_LATENCY_1WS;
 800032c:	4b4a      	ldr	r3, [pc, #296]	; (8000458 <ClocksInit+0x130>)
 800032e:	2201      	movs	r2, #1
 8000330:	601a      	str	r2, [r3, #0]

	/*2. Enable hse and wait until it's ready*/
	RCC->CR |= (1 << 16); // 16s bit
 8000332:	4b4a      	ldr	r3, [pc, #296]	; (800045c <ClocksInit+0x134>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a49      	ldr	r2, [pc, #292]	; (800045c <ClocksInit+0x134>)
 8000338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800033c:	6013      	str	r3, [r2, #0]
	while( !(RCC->CR & (1 << 17)) ){} // 17s bit
 800033e:	bf00      	nop
 8000340:	4b46      	ldr	r3, [pc, #280]	; (800045c <ClocksInit+0x134>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <ClocksInit+0x18>

	/*3. Set AHB, APB1 & APB2 prescaler*/
	//HPRE
	RCC->CFGR &= ~(RCC_CFGR_HPRE_Msk); // AHB_presc = 1
 800034c:	4b43      	ldr	r3, [pc, #268]	; (800045c <ClocksInit+0x134>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	4a42      	ldr	r2, [pc, #264]	; (800045c <ClocksInit+0x134>)
 8000352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000356:	6093      	str	r3, [r2, #8]
	//PPRE1
	RCC->CFGR &= ~(RCC_CFGR_PPRE1_Msk);
 8000358:	4b40      	ldr	r3, [pc, #256]	; (800045c <ClocksInit+0x134>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	4a3f      	ldr	r2, [pc, #252]	; (800045c <ClocksInit+0x134>)
 800035e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000362:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b100 << 10); //presc = 2
 8000364:	4b3d      	ldr	r3, [pc, #244]	; (800045c <ClocksInit+0x134>)
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	4a3c      	ldr	r2, [pc, #240]	; (800045c <ClocksInit+0x134>)
 800036a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800036e:	6093      	str	r3, [r2, #8]
	//PPRE2
	RCC->CFGR &= ~(RCC_CFGR_PPRE2_Msk);
 8000370:	4b3a      	ldr	r3, [pc, #232]	; (800045c <ClocksInit+0x134>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a39      	ldr	r2, [pc, #228]	; (800045c <ClocksInit+0x134>)
 8000376:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800037a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b100 << 13); //presc = 2
 800037c:	4b37      	ldr	r3, [pc, #220]	; (800045c <ClocksInit+0x134>)
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	4a36      	ldr	r2, [pc, #216]	; (800045c <ClocksInit+0x134>)
 8000382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000386:	6093      	str	r3, [r2, #8]

	/*4. Config PLL*/
	// Set PLL source (HSE)
	RCC->PLLCFGR |= (1 << 22);
 8000388:	4b34      	ldr	r3, [pc, #208]	; (800045c <ClocksInit+0x134>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	4a33      	ldr	r2, [pc, #204]	; (800045c <ClocksInit+0x134>)
 800038e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000392:	6053      	str	r3, [r2, #4]
	// Set PLLM
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM_Msk);
 8000394:	4b31      	ldr	r3, [pc, #196]	; (800045c <ClocksInit+0x134>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	4a30      	ldr	r2, [pc, #192]	; (800045c <ClocksInit+0x134>)
 800039a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800039e:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (8 << 0);
 80003a0:	4b2e      	ldr	r3, [pc, #184]	; (800045c <ClocksInit+0x134>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	4a2d      	ldr	r2, [pc, #180]	; (800045c <ClocksInit+0x134>)
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6053      	str	r3, [r2, #4]
	// Set PLLN
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN_Msk);
 80003ac:	4b2b      	ldr	r3, [pc, #172]	; (800045c <ClocksInit+0x134>)
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	4a2a      	ldr	r2, [pc, #168]	; (800045c <ClocksInit+0x134>)
 80003b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80003b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003ba:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (140 << 6);
 80003bc:	4b27      	ldr	r3, [pc, #156]	; (800045c <ClocksInit+0x134>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a26      	ldr	r2, [pc, #152]	; (800045c <ClocksInit+0x134>)
 80003c2:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 80003c6:	6053      	str	r3, [r2, #4]
	// Set PLLP
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP_Msk);
 80003c8:	4b24      	ldr	r3, [pc, #144]	; (800045c <ClocksInit+0x134>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	4a23      	ldr	r2, [pc, #140]	; (800045c <ClocksInit+0x134>)
 80003ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80003d2:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0 << 16); // presc = 2
 80003d4:	4b21      	ldr	r3, [pc, #132]	; (800045c <ClocksInit+0x134>)
 80003d6:	4a21      	ldr	r2, [pc, #132]	; (800045c <ClocksInit+0x134>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	6053      	str	r3, [r2, #4]
	//Enable PLL and wait until it starts
	RCC->CR |= (1 << 24);
 80003dc:	4b1f      	ldr	r3, [pc, #124]	; (800045c <ClocksInit+0x134>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a1e      	ldr	r2, [pc, #120]	; (800045c <ClocksInit+0x134>)
 80003e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003e6:	6013      	str	r3, [r2, #0]
	while( !(RCC->CR & (1 << 25)) ){}
 80003e8:	bf00      	nop
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <ClocksInit+0x134>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0f9      	beq.n	80003ea <ClocksInit+0xc2>

	/*5. Set main clock switch to PLL source.
	 * Check, that the switch moves to the correct source.*/
	RCC->CFGR |= (2 << 0);
 80003f6:	4b19      	ldr	r3, [pc, #100]	; (800045c <ClocksInit+0x134>)
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	4a18      	ldr	r2, [pc, #96]	; (800045c <ClocksInit+0x134>)
 80003fc:	f043 0302 	orr.w	r3, r3, #2
 8000400:	6093      	str	r3, [r2, #8]
	while( !(RCC->CFGR & (2 << 2) )){}
 8000402:	bf00      	nop
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <ClocksInit+0x134>)
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	f003 0308 	and.w	r3, r3, #8
 800040c:	2b00      	cmp	r3, #0
 800040e:	d0f9      	beq.n	8000404 <ClocksInit+0xdc>


	// GPIOC_EN and GPIOA_EN
	RCC->AHB1ENR |= (1 << 2) | (1 << 0);
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <ClocksInit+0x134>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000414:	4a11      	ldr	r2, [pc, #68]	; (800045c <ClocksInit+0x134>)
 8000416:	f043 0305 	orr.w	r3, r3, #5
 800041a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER |= (1 << RED_LED_PIN*2);
 800041c:	4b10      	ldr	r3, [pc, #64]	; (8000460 <ClocksInit+0x138>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a10      	ldr	r2, [pc, #64]	; (8000464 <ClocksInit+0x13c>)
 8000422:	7812      	ldrb	r2, [r2, #0]
 8000424:	0052      	lsls	r2, r2, #1
 8000426:	2101      	movs	r1, #1
 8000428:	fa01 f202 	lsl.w	r2, r1, r2
 800042c:	4611      	mov	r1, r2
 800042e:	4a0c      	ldr	r2, [pc, #48]	; (8000460 <ClocksInit+0x138>)
 8000430:	430b      	orrs	r3, r1
 8000432:	6013      	str	r3, [r2, #0]
	GPIOC->ODR &= ~(1 << RED_LED_PIN);
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <ClocksInit+0x138>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	4a0a      	ldr	r2, [pc, #40]	; (8000464 <ClocksInit+0x13c>)
 800043a:	7812      	ldrb	r2, [r2, #0]
 800043c:	4611      	mov	r1, r2
 800043e:	2201      	movs	r2, #1
 8000440:	408a      	lsls	r2, r1
 8000442:	43d2      	mvns	r2, r2
 8000444:	4611      	mov	r1, r2
 8000446:	4a06      	ldr	r2, [pc, #24]	; (8000460 <ClocksInit+0x138>)
 8000448:	400b      	ands	r3, r1
 800044a:	6153      	str	r3, [r2, #20]

	SysTick_Config(SysTicks); //SysTick Enable and configuration
 800044c:	f241 203a 	movw	r0, #4666	; 0x123a
 8000450:	f7ff ff08 	bl	8000264 <SysTick_Config>
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40023c00 	.word	0x40023c00
 800045c:	40023800 	.word	0x40023800
 8000460:	40020800 	.word	0x40020800
 8000464:	20000000 	.word	0x20000000

08000468 <main>:
	}*/
	//NVIC_EnableIRQ(USART2_IRQn);
}

int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	// 0. Set Clocks
	ClocksInit();
 800046c:	f7ff ff5c 	bl	8000328 <ClocksInit>

	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000470:	4b26      	ldr	r3, [pc, #152]	; (800050c <main+0xa4>)
 8000472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000474:	4a25      	ldr	r2, [pc, #148]	; (800050c <main+0xa4>)
 8000476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800047a:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOA->MODER |= 2 << GPIO_MODER_MODER2_Pos;
 800047c:	4b24      	ldr	r3, [pc, #144]	; (8000510 <main+0xa8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a23      	ldr	r2, [pc, #140]	; (8000510 <main+0xa8>)
 8000482:	f043 0320 	orr.w	r3, r3, #32
 8000486:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 2 << GPIO_MODER_MODER3_Pos;
 8000488:	4b21      	ldr	r3, [pc, #132]	; (8000510 <main+0xa8>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a20      	ldr	r2, [pc, #128]	; (8000510 <main+0xa8>)
 800048e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000492:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= 7 << GPIO_AFRL_AFSEL2_Pos;
 8000494:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <main+0xa8>)
 8000496:	6a1b      	ldr	r3, [r3, #32]
 8000498:	4a1d      	ldr	r2, [pc, #116]	; (8000510 <main+0xa8>)
 800049a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800049e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7 << GPIO_AFRL_AFSEL3_Pos;
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <main+0xa8>)
 80004a2:	6a1b      	ldr	r3, [r3, #32]
 80004a4:	4a1a      	ldr	r2, [pc, #104]	; (8000510 <main+0xa8>)
 80004a6:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80004aa:	6213      	str	r3, [r2, #32]

	// 1. Set USART2 baudrate
	USART2->BRR = APB1_FREQ / BAUDRATE;
 80004ac:	4b19      	ldr	r3, [pc, #100]	; (8000514 <main+0xac>)
 80004ae:	f240 122f 	movw	r2, #303	; 0x12f
 80004b2:	609a      	str	r2, [r3, #8]
	/* 2. Configure USART to receive and
	* transmit data, generate the required
	* interrupt. */
	USART2->CR1 &= ~(USART_CR1_UE_Msk);
 80004b4:	4b17      	ldr	r3, [pc, #92]	; (8000514 <main+0xac>)
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	4a16      	ldr	r2, [pc, #88]	; (8000514 <main+0xac>)
 80004ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004be:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~(USART_CR1_TE_Msk);
 80004c0:	4b14      	ldr	r3, [pc, #80]	; (8000514 <main+0xac>)
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	4a13      	ldr	r2, [pc, #76]	; (8000514 <main+0xac>)
 80004c6:	f023 0308 	bic.w	r3, r3, #8
 80004ca:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~(USART_CR1_RE_Msk);
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <main+0xac>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	4a10      	ldr	r2, [pc, #64]	; (8000514 <main+0xac>)
 80004d2:	f023 0304 	bic.w	r3, r3, #4
 80004d6:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~(USART_CR1_RXNEIE_Msk);
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <main+0xac>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <main+0xac>)
 80004de:	f023 0320 	bic.w	r3, r3, #32
 80004e2:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~(USART_CR1_TXEIE_Msk);
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <main+0xac>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <main+0xac>)
 80004ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004ee:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE /*| USART_CR1_TXEIE*/;
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <main+0xac>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	4a07      	ldr	r2, [pc, #28]	; (8000514 <main+0xac>)
 80004f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004fa:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80004fe:	60d3      	str	r3, [r2, #12]
	// 3. Enable interrupts in the interrupt controller.
	NVIC_EnableIRQ(USART2_IRQn);
 8000500:	2026      	movs	r0, #38	; 0x26
 8000502:	f7ff fe67 	bl	80001d4 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000506:	b662      	cpsie	i

	__enable_irq ();

	while(1){
 8000508:	e7fe      	b.n	8000508 <main+0xa0>
 800050a:	bf00      	nop
 800050c:	40023800 	.word	0x40023800
 8000510:	40020000 	.word	0x40020000
 8000514:	40004400 	.word	0x40004400

08000518 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <LoopForever+0x6>)
  ldr r1, =_edata
 800051e:	490e      	ldr	r1, [pc, #56]	; (8000558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <LoopForever+0xe>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000524:	e002      	b.n	800052c <LoopCopyDataInit>

08000526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052a:	3304      	adds	r3, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000530:	d3f9      	bcc.n	8000526 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000534:	4c0b      	ldr	r4, [pc, #44]	; (8000564 <LoopForever+0x16>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000538:	e001      	b.n	800053e <LoopFillZerobss>

0800053a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800053c:	3204      	adds	r2, #4

0800053e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000540:	d3fb      	bcc.n	800053a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000542:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000546:	f000 f811 	bl	800056c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054a:	f7ff ff8d 	bl	8000468 <main>

0800054e <LoopForever>:

LoopForever:
    b LoopForever
 800054e:	e7fe      	b.n	800054e <LoopForever>
  ldr   r0, =_estack
 8000550:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800055c:	080005d4 	.word	0x080005d4
  ldr r2, =_sbss
 8000560:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000564:	20000028 	.word	0x20000028

08000568 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC_IRQHandler>
	...

0800056c <__libc_init_array>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	4e0d      	ldr	r6, [pc, #52]	; (80005a4 <__libc_init_array+0x38>)
 8000570:	4c0d      	ldr	r4, [pc, #52]	; (80005a8 <__libc_init_array+0x3c>)
 8000572:	1ba4      	subs	r4, r4, r6
 8000574:	10a4      	asrs	r4, r4, #2
 8000576:	2500      	movs	r5, #0
 8000578:	42a5      	cmp	r5, r4
 800057a:	d109      	bne.n	8000590 <__libc_init_array+0x24>
 800057c:	4e0b      	ldr	r6, [pc, #44]	; (80005ac <__libc_init_array+0x40>)
 800057e:	4c0c      	ldr	r4, [pc, #48]	; (80005b0 <__libc_init_array+0x44>)
 8000580:	f000 f818 	bl	80005b4 <_init>
 8000584:	1ba4      	subs	r4, r4, r6
 8000586:	10a4      	asrs	r4, r4, #2
 8000588:	2500      	movs	r5, #0
 800058a:	42a5      	cmp	r5, r4
 800058c:	d105      	bne.n	800059a <__libc_init_array+0x2e>
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000594:	4798      	blx	r3
 8000596:	3501      	adds	r5, #1
 8000598:	e7ee      	b.n	8000578 <__libc_init_array+0xc>
 800059a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800059e:	4798      	blx	r3
 80005a0:	3501      	adds	r5, #1
 80005a2:	e7f2      	b.n	800058a <__libc_init_array+0x1e>
 80005a4:	080005cc 	.word	0x080005cc
 80005a8:	080005cc 	.word	0x080005cc
 80005ac:	080005cc 	.word	0x080005cc
 80005b0:	080005d0 	.word	0x080005d0

080005b4 <_init>:
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b6:	bf00      	nop
 80005b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ba:	bc08      	pop	{r3}
 80005bc:	469e      	mov	lr, r3
 80005be:	4770      	bx	lr

080005c0 <_fini>:
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	bf00      	nop
 80005c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c6:	bc08      	pop	{r3}
 80005c8:	469e      	mov	lr, r3
 80005ca:	4770      	bx	lr

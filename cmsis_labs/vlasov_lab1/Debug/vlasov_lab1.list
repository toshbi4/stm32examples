
vlasov_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000027c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000440  08000448  00010448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000440  08000440  00010448  2**0
                  CONTENTS
  4 .ARM          00000000  08000440  08000440  00010448  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000440  08000448  00010448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000440  08000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000444  08000444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000448  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000448  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
 12 .debug_info   000001f6  00000000  00000000  00010478  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000b4  00000000  00000000  0001066e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f2c  00000000  00000000  000107a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000429  00000000  00000000  000116cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003cc2  00000000  00000000  00011af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000157b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00015834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000428 	.word	0x08000428

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000428 	.word	0x08000428

08000204 <main>:

#define  GPIOC ((GPIO_TypeDef *) GPIOC_BASE)
#define PC9 *((uint32_t *)(PERIPH_BB_BASE + ((uint32_t)&(GPIOC->ODR) - PERIPH_BASE)*32 + 9*4))

int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b089      	sub	sp, #36	; 0x24
 8000208:	af00      	add	r7, sp, #0
	*((uint32_t *) 0x40023830) |= 1 | 4;
 800020a:	4b5c      	ldr	r3, [pc, #368]	; (800037c <main+0x178>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a5b      	ldr	r2, [pc, #364]	; (800037c <main+0x178>)
 8000210:	f043 0305 	orr.w	r3, r3, #5
 8000214:	6013      	str	r3, [r2, #0]

	uint32_t BLUE_LED_PIN = 0x8;
 8000216:	2308      	movs	r3, #8
 8000218:	613b      	str	r3, [r7, #16]
	uint8_t RED_LED_PIN = 9;
 800021a:	2309      	movs	r3, #9
 800021c:	73fb      	strb	r3, [r7, #15]
	uint32_t BLUE_BUTTON_PIN = 0x6;
 800021e:	2306      	movs	r3, #6
 8000220:	60bb      	str	r3, [r7, #8]
	uint32_t RED_BUTTON_PIN = 0x5;
 8000222:	2305      	movs	r3, #5
 8000224:	607b      	str	r3, [r7, #4]

	GPIOC->MODER |= (1<<BLUE_LED_PIN*2);
 8000226:	4b56      	ldr	r3, [pc, #344]	; (8000380 <main+0x17c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	693a      	ldr	r2, [r7, #16]
 800022c:	0052      	lsls	r2, r2, #1
 800022e:	2101      	movs	r1, #1
 8000230:	fa01 f202 	lsl.w	r2, r1, r2
 8000234:	4611      	mov	r1, r2
 8000236:	4a52      	ldr	r2, [pc, #328]	; (8000380 <main+0x17c>)
 8000238:	430b      	orrs	r3, r1
 800023a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1<<RED_LED_PIN*2);
 800023c:	4b50      	ldr	r3, [pc, #320]	; (8000380 <main+0x17c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	7bfa      	ldrb	r2, [r7, #15]
 8000242:	0052      	lsls	r2, r2, #1
 8000244:	2101      	movs	r1, #1
 8000246:	fa01 f202 	lsl.w	r2, r1, r2
 800024a:	4611      	mov	r1, r2
 800024c:	4a4c      	ldr	r2, [pc, #304]	; (8000380 <main+0x17c>)
 800024e:	430b      	orrs	r3, r1
 8000250:	6013      	str	r3, [r2, #0]

	GPIOC->MODER &= ~(1<<BLUE_BUTTON_PIN*2);
 8000252:	4b4b      	ldr	r3, [pc, #300]	; (8000380 <main+0x17c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	68ba      	ldr	r2, [r7, #8]
 8000258:	0052      	lsls	r2, r2, #1
 800025a:	2101      	movs	r1, #1
 800025c:	fa01 f202 	lsl.w	r2, r1, r2
 8000260:	43d2      	mvns	r2, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a46      	ldr	r2, [pc, #280]	; (8000380 <main+0x17c>)
 8000266:	400b      	ands	r3, r1
 8000268:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR |= (0<<BLUE_BUTTON_PIN*2);
 800026a:	4b45      	ldr	r3, [pc, #276]	; (8000380 <main+0x17c>)
 800026c:	4a44      	ldr	r2, [pc, #272]	; (8000380 <main+0x17c>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~(1<<RED_BUTTON_PIN*2);
 8000272:	4b43      	ldr	r3, [pc, #268]	; (8000380 <main+0x17c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	0052      	lsls	r2, r2, #1
 800027a:	2101      	movs	r1, #1
 800027c:	fa01 f202 	lsl.w	r2, r1, r2
 8000280:	43d2      	mvns	r2, r2
 8000282:	4611      	mov	r1, r2
 8000284:	4a3e      	ldr	r2, [pc, #248]	; (8000380 <main+0x17c>)
 8000286:	400b      	ands	r3, r1
 8000288:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR |= (0<<RED_BUTTON_PIN*2);
 800028a:	4b3d      	ldr	r3, [pc, #244]	; (8000380 <main+0x17c>)
 800028c:	4a3c      	ldr	r2, [pc, #240]	; (8000380 <main+0x17c>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	60d3      	str	r3, [r2, #12]

	GPIOC->ODR |= (1<<BLUE_LED_PIN);
 8000292:	4b3b      	ldr	r3, [pc, #236]	; (8000380 <main+0x17c>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	2101      	movs	r1, #1
 8000298:	693a      	ldr	r2, [r7, #16]
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	4611      	mov	r1, r2
 80002a0:	4a37      	ldr	r2, [pc, #220]	; (8000380 <main+0x17c>)
 80002a2:	430b      	orrs	r3, r1
 80002a4:	6153      	str	r3, [r2, #20]
	PC9 = 0;
 80002a6:	4b37      	ldr	r3, [pc, #220]	; (8000384 <main+0x180>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]

	uint8_t blue_button_state = 1;
 80002ac:	2301      	movs	r3, #1
 80002ae:	70fb      	strb	r3, [r7, #3]
	uint8_t red_button_state = 1;
 80002b0:	2301      	movs	r3, #1
 80002b2:	70bb      	strb	r3, [r7, #2]

	uint8_t variable = 0b00;
 80002b4:	2300      	movs	r3, #0
 80002b6:	77fb      	strb	r3, [r7, #31]

	while(1){
		blue_button_state = GPIOC->IDR & (1<<BLUE_BUTTON_PIN);
 80002b8:	4b31      	ldr	r3, [pc, #196]	; (8000380 <main+0x17c>)
 80002ba:	691b      	ldr	r3, [r3, #16]
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	2101      	movs	r1, #1
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	4013      	ands	r3, r2
 80002ca:	70fb      	strb	r3, [r7, #3]
		red_button_state = GPIOC->IDR & (1<<RED_BUTTON_PIN);
 80002cc:	4b2c      	ldr	r3, [pc, #176]	; (8000380 <main+0x17c>)
 80002ce:	691b      	ldr	r3, [r3, #16]
 80002d0:	b2da      	uxtb	r2, r3
 80002d2:	2101      	movs	r1, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	4013      	ands	r3, r2
 80002de:	70bb      	strb	r3, [r7, #2]

		if (!blue_button_state){
 80002e0:	78fb      	ldrb	r3, [r7, #3]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d10f      	bne.n	8000306 <main+0x102>
			if (variable > 0){
 80002e6:	7ffb      	ldrb	r3, [r7, #31]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d00c      	beq.n	8000306 <main+0x102>
				variable -= 1;
 80002ec:	7ffb      	ldrb	r3, [r7, #31]
 80002ee:	3b01      	subs	r3, #1
 80002f0:	77fb      	strb	r3, [r7, #31]
				uint32_t count = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	61bb      	str	r3, [r7, #24]
				while (count<200000) {
 80002f6:	e002      	b.n	80002fe <main+0xfa>
					count += 1;
 80002f8:	69bb      	ldr	r3, [r7, #24]
 80002fa:	3301      	adds	r3, #1
 80002fc:	61bb      	str	r3, [r7, #24]
				while (count<200000) {
 80002fe:	69bb      	ldr	r3, [r7, #24]
 8000300:	4a21      	ldr	r2, [pc, #132]	; (8000388 <main+0x184>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d9f8      	bls.n	80002f8 <main+0xf4>
				}
			}
		}

		if (!red_button_state){
 8000306:	78bb      	ldrb	r3, [r7, #2]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d10f      	bne.n	800032c <main+0x128>
			if (variable < 3){
 800030c:	7ffb      	ldrb	r3, [r7, #31]
 800030e:	2b02      	cmp	r3, #2
 8000310:	d80c      	bhi.n	800032c <main+0x128>
				variable += 1;
 8000312:	7ffb      	ldrb	r3, [r7, #31]
 8000314:	3301      	adds	r3, #1
 8000316:	77fb      	strb	r3, [r7, #31]
				uint32_t count = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]
				while (count<200000) {
 800031c:	e002      	b.n	8000324 <main+0x120>
					count += 1;
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	3301      	adds	r3, #1
 8000322:	617b      	str	r3, [r7, #20]
				while (count<200000) {
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	4a18      	ldr	r2, [pc, #96]	; (8000388 <main+0x184>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d9f8      	bls.n	800031e <main+0x11a>
				}
			}
		}

		if (variable & 0b10){
 800032c:	7ffb      	ldrb	r3, [r7, #31]
 800032e:	f003 0302 	and.w	r3, r3, #2
 8000332:	2b00      	cmp	r3, #0
 8000334:	d003      	beq.n	800033e <main+0x13a>
			PC9 = 1;
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <main+0x180>)
 8000338:	2201      	movs	r2, #1
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	e002      	b.n	8000344 <main+0x140>
		} else {
			PC9 = 0;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <main+0x180>)
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
		}

		if (variable & 0b01){
 8000344:	7ffb      	ldrb	r3, [r7, #31]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d00a      	beq.n	8000364 <main+0x160>
			GPIOC->ODR |= (1<<BLUE_LED_PIN);
 800034e:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <main+0x17c>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	2101      	movs	r1, #1
 8000354:	693a      	ldr	r2, [r7, #16]
 8000356:	fa01 f202 	lsl.w	r2, r1, r2
 800035a:	4611      	mov	r1, r2
 800035c:	4a08      	ldr	r2, [pc, #32]	; (8000380 <main+0x17c>)
 800035e:	430b      	orrs	r3, r1
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	e7a9      	b.n	80002b8 <main+0xb4>
		} else {
			GPIOC->ODR &= ~(1<<BLUE_LED_PIN);
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <main+0x17c>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	2101      	movs	r1, #1
 800036a:	693a      	ldr	r2, [r7, #16]
 800036c:	fa01 f202 	lsl.w	r2, r1, r2
 8000370:	43d2      	mvns	r2, r2
 8000372:	4611      	mov	r1, r2
 8000374:	4a02      	ldr	r2, [pc, #8]	; (8000380 <main+0x17c>)
 8000376:	400b      	ands	r3, r1
 8000378:	6153      	str	r3, [r2, #20]
		blue_button_state = GPIOC->IDR & (1<<BLUE_BUTTON_PIN);
 800037a:	e79d      	b.n	80002b8 <main+0xb4>
 800037c:	40023830 	.word	0x40023830
 8000380:	40020800 	.word	0x40020800
 8000384:	424102a4 	.word	0x424102a4
 8000388:	00030d3f 	.word	0x00030d3f

0800038c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800038c:	480d      	ldr	r0, [pc, #52]	; (80003c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480d      	ldr	r0, [pc, #52]	; (80003c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000392:	490e      	ldr	r1, [pc, #56]	; (80003cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000394:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <LoopForever+0xe>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a8:	4c0b      	ldr	r4, [pc, #44]	; (80003d8 <LoopForever+0x16>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003b6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80003ba:	f000 f811 	bl	80003e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003be:	f7ff ff21 	bl	8000204 <main>

080003c2 <LoopForever>:

LoopForever:
    b LoopForever
 80003c2:	e7fe      	b.n	80003c2 <LoopForever>
  ldr   r0, =_estack
 80003c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d0:	08000448 	.word	0x08000448
  ldr r2, =_sbss
 80003d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d8:	2000001c 	.word	0x2000001c

080003dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003dc:	e7fe      	b.n	80003dc <ADC_IRQHandler>
	...

080003e0 <__libc_init_array>:
 80003e0:	b570      	push	{r4, r5, r6, lr}
 80003e2:	4e0d      	ldr	r6, [pc, #52]	; (8000418 <__libc_init_array+0x38>)
 80003e4:	4c0d      	ldr	r4, [pc, #52]	; (800041c <__libc_init_array+0x3c>)
 80003e6:	1ba4      	subs	r4, r4, r6
 80003e8:	10a4      	asrs	r4, r4, #2
 80003ea:	2500      	movs	r5, #0
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	d109      	bne.n	8000404 <__libc_init_array+0x24>
 80003f0:	4e0b      	ldr	r6, [pc, #44]	; (8000420 <__libc_init_array+0x40>)
 80003f2:	4c0c      	ldr	r4, [pc, #48]	; (8000424 <__libc_init_array+0x44>)
 80003f4:	f000 f818 	bl	8000428 <_init>
 80003f8:	1ba4      	subs	r4, r4, r6
 80003fa:	10a4      	asrs	r4, r4, #2
 80003fc:	2500      	movs	r5, #0
 80003fe:	42a5      	cmp	r5, r4
 8000400:	d105      	bne.n	800040e <__libc_init_array+0x2e>
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000408:	4798      	blx	r3
 800040a:	3501      	adds	r5, #1
 800040c:	e7ee      	b.n	80003ec <__libc_init_array+0xc>
 800040e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000412:	4798      	blx	r3
 8000414:	3501      	adds	r5, #1
 8000416:	e7f2      	b.n	80003fe <__libc_init_array+0x1e>
 8000418:	08000440 	.word	0x08000440
 800041c:	08000440 	.word	0x08000440
 8000420:	08000440 	.word	0x08000440
 8000424:	08000444 	.word	0x08000444

08000428 <_init>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr

08000434 <_fini>:
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	bf00      	nop
 8000438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043a:	bc08      	pop	{r3}
 800043c:	469e      	mov	lr, r3
 800043e:	4770      	bx	lr


vlasov_lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000334  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004f8  080004f8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004f8  080004f8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004f8  080004f8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004f8  080004f8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004f8  080004f8  000104f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004fc  080004fc  000104fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000500  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000504  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000504  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a3a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001ae  00000000  00000000  00020a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000060  00000000  00000000  00020c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  00020c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018928  00000000  00000000  00020cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000539  00000000  00000000  000395f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ac56  00000000  00000000  00039b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c477f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c4  00000000  00000000  000c47fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004e0 	.word	0x080004e0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080004e0 	.word	0x080004e0

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	; (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	3b01      	subs	r3, #1
 8000264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000268:	d301      	bcc.n	800026e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800026a:	2301      	movs	r3, #1
 800026c:	e00f      	b.n	800028e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <SysTick_Config+0x40>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3b01      	subs	r3, #1
 8000274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000276:	210f      	movs	r1, #15
 8000278:	f04f 30ff 	mov.w	r0, #4294967295
 800027c:	f7ff ffc2 	bl	8000204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <SysTick_Config+0x40>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000286:	4b04      	ldr	r3, [pc, #16]	; (8000298 <SysTick_Config+0x40>)
 8000288:	2207      	movs	r2, #7
 800028a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800028c:	2300      	movs	r3, #0
}
 800028e:	4618      	mov	r0, r3
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	e000e010 	.word	0xe000e010

0800029c <SysTick_Handler>:
uint32_t counter=0;
uint8_t RED_LED_PIN = 9;
uint8_t var=0;

void SysTick_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	counter++;
 80002a0:	4b1a      	ldr	r3, [pc, #104]	; (800030c <SysTick_Handler+0x70>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	3301      	adds	r3, #1
 80002a6:	4a19      	ldr	r2, [pc, #100]	; (800030c <SysTick_Handler+0x70>)
 80002a8:	6013      	str	r3, [r2, #0]
	if(counter>=SysTicksClk){
 80002aa:	4b18      	ldr	r3, [pc, #96]	; (800030c <SysTick_Handler+0x70>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f643 2297 	movw	r2, #14999	; 0x3a97
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d924      	bls.n	8000300 <SysTick_Handler+0x64>
		counter=0;
 80002b6:	4b15      	ldr	r3, [pc, #84]	; (800030c <SysTick_Handler+0x70>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
		if (var == 1){
 80002bc:	4b14      	ldr	r3, [pc, #80]	; (8000310 <SysTick_Handler+0x74>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d10e      	bne.n	80002e2 <SysTick_Handler+0x46>
			var = 0;
 80002c4:	4b12      	ldr	r3, [pc, #72]	; (8000310 <SysTick_Handler+0x74>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR |= (1<<RED_LED_PIN);
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <SysTick_Handler+0x78>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	4a12      	ldr	r2, [pc, #72]	; (8000318 <SysTick_Handler+0x7c>)
 80002d0:	7812      	ldrb	r2, [r2, #0]
 80002d2:	4611      	mov	r1, r2
 80002d4:	2201      	movs	r2, #1
 80002d6:	408a      	lsls	r2, r1
 80002d8:	4611      	mov	r1, r2
 80002da:	4a0e      	ldr	r2, [pc, #56]	; (8000314 <SysTick_Handler+0x78>)
 80002dc:	430b      	orrs	r3, r1
 80002de:	6153      	str	r3, [r2, #20]
			var = 1;
			GPIOC->ODR &= ~(1<<RED_LED_PIN);
		}
	}

}
 80002e0:	e00e      	b.n	8000300 <SysTick_Handler+0x64>
			var = 1;
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <SysTick_Handler+0x74>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1<<RED_LED_PIN);
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <SysTick_Handler+0x78>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <SysTick_Handler+0x7c>)
 80002ee:	7812      	ldrb	r2, [r2, #0]
 80002f0:	4611      	mov	r1, r2
 80002f2:	2201      	movs	r2, #1
 80002f4:	408a      	lsls	r2, r1
 80002f6:	43d2      	mvns	r2, r2
 80002f8:	4611      	mov	r1, r2
 80002fa:	4a06      	ldr	r2, [pc, #24]	; (8000314 <SysTick_Handler+0x78>)
 80002fc:	400b      	ands	r3, r1
 80002fe:	6153      	str	r3, [r2, #20]
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	20000020 	.word	0x20000020
 8000310:	20000024 	.word	0x20000024
 8000314:	40020800 	.word	0x40020800
 8000318:	20000000 	.word	0x20000000

0800031c <main>:
int main()
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	/*1. Set flash latency*/
	FLASH->ACR=FLASH_ACR_LATENCY_4WS;
 8000320:	4b44      	ldr	r3, [pc, #272]	; (8000434 <main+0x118>)
 8000322:	2204      	movs	r2, #4
 8000324:	601a      	str	r2, [r3, #0]

	/*2. Enable hse and wait until it's ready*/
	RCC->CR |= (1 << 16); // 16s bit
 8000326:	4b44      	ldr	r3, [pc, #272]	; (8000438 <main+0x11c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a43      	ldr	r2, [pc, #268]	; (8000438 <main+0x11c>)
 800032c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000330:	6013      	str	r3, [r2, #0]
	while( !(RCC->CR & (1 << 17)) ){} // 17s bit
 8000332:	bf00      	nop
 8000334:	4b40      	ldr	r3, [pc, #256]	; (8000438 <main+0x11c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0f9      	beq.n	8000334 <main+0x18>

	/*3. Set AHB, APB1 & APB2 prescaler*/
	//HPRE
	//RCC->CFGR |= (1 << 4); //4 bit
	RCC->CFGR &= ~(RCC_CFGR_HPRE_Msk); // AHB_presc = 1
 8000340:	4b3d      	ldr	r3, [pc, #244]	; (8000438 <main+0x11c>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	4a3c      	ldr	r2, [pc, #240]	; (8000438 <main+0x11c>)
 8000346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800034a:	6093      	str	r3, [r2, #8]
	//PPRE1
	RCC->CFGR |= (0b101 << 10); //presc = 4
 800034c:	4b3a      	ldr	r3, [pc, #232]	; (8000438 <main+0x11c>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	4a39      	ldr	r2, [pc, #228]	; (8000438 <main+0x11c>)
 8000352:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000356:	6093      	str	r3, [r2, #8]
	//PPRE2
	RCC->CFGR |= (0b100 << 13); //presc = 2
 8000358:	4b37      	ldr	r3, [pc, #220]	; (8000438 <main+0x11c>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	4a36      	ldr	r2, [pc, #216]	; (8000438 <main+0x11c>)
 800035e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000362:	6093      	str	r3, [r2, #8]

	/*4. Config PLL*/
	// Set PLL source (HSE)
	RCC->PLLCFGR |= (1 << 22);
 8000364:	4b34      	ldr	r3, [pc, #208]	; (8000438 <main+0x11c>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	4a33      	ldr	r2, [pc, #204]	; (8000438 <main+0x11c>)
 800036a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800036e:	6053      	str	r3, [r2, #4]
	// Set PLLM
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM_Msk);
 8000370:	4b31      	ldr	r3, [pc, #196]	; (8000438 <main+0x11c>)
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4a30      	ldr	r2, [pc, #192]	; (8000438 <main+0x11c>)
 8000376:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800037a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (18 << 0);
 800037c:	4b2e      	ldr	r3, [pc, #184]	; (8000438 <main+0x11c>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	4a2d      	ldr	r2, [pc, #180]	; (8000438 <main+0x11c>)
 8000382:	f043 0312 	orr.w	r3, r3, #18
 8000386:	6053      	str	r3, [r2, #4]
	// Set PLLN
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN_Msk);
 8000388:	4b2b      	ldr	r3, [pc, #172]	; (8000438 <main+0x11c>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	4a2a      	ldr	r2, [pc, #168]	; (8000438 <main+0x11c>)
 800038e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000396:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (280 << 6);
 8000398:	4b27      	ldr	r3, [pc, #156]	; (8000438 <main+0x11c>)
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	4a26      	ldr	r2, [pc, #152]	; (8000438 <main+0x11c>)
 800039e:	f443 438c 	orr.w	r3, r3, #17920	; 0x4600
 80003a2:	6053      	str	r3, [r2, #4]
	// Set PLLP
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP_Msk);
 80003a4:	4b24      	ldr	r3, [pc, #144]	; (8000438 <main+0x11c>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4a23      	ldr	r2, [pc, #140]	; (8000438 <main+0x11c>)
 80003aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80003ae:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0 << 16); // presc = 2
 80003b0:	4b21      	ldr	r3, [pc, #132]	; (8000438 <main+0x11c>)
 80003b2:	4a21      	ldr	r2, [pc, #132]	; (8000438 <main+0x11c>)
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	6053      	str	r3, [r2, #4]
	//Enable PLL and wait until it starts
	RCC->CR |= (1 << 24);
 80003b8:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <main+0x11c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a1e      	ldr	r2, [pc, #120]	; (8000438 <main+0x11c>)
 80003be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003c2:	6013      	str	r3, [r2, #0]
	while( !(RCC->CR & (1 << 25)) ){}
 80003c4:	bf00      	nop
 80003c6:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <main+0x11c>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d0f9      	beq.n	80003c6 <main+0xaa>

	/*5. Set main clock switch to PLL source.
	 * Check, that the switch moves to the correct source.*/
	RCC->CFGR |= (2 << 0);
 80003d2:	4b19      	ldr	r3, [pc, #100]	; (8000438 <main+0x11c>)
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	4a18      	ldr	r2, [pc, #96]	; (8000438 <main+0x11c>)
 80003d8:	f043 0302 	orr.w	r3, r3, #2
 80003dc:	6093      	str	r3, [r2, #8]
	while( !(RCC->CFGR & (2 << 2) )){}
 80003de:	bf00      	nop
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <main+0x11c>)
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	f003 0308 	and.w	r3, r3, #8
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d0f9      	beq.n	80003e0 <main+0xc4>


	// GPIOC_EN
	RCC->AHB1ENR |= (1 << 2);
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <main+0x11c>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4a11      	ldr	r2, [pc, #68]	; (8000438 <main+0x11c>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER |= (1 << RED_LED_PIN*2);
 80003f8:	4b10      	ldr	r3, [pc, #64]	; (800043c <main+0x120>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a10      	ldr	r2, [pc, #64]	; (8000440 <main+0x124>)
 80003fe:	7812      	ldrb	r2, [r2, #0]
 8000400:	0052      	lsls	r2, r2, #1
 8000402:	2101      	movs	r1, #1
 8000404:	fa01 f202 	lsl.w	r2, r1, r2
 8000408:	4611      	mov	r1, r2
 800040a:	4a0c      	ldr	r2, [pc, #48]	; (800043c <main+0x120>)
 800040c:	430b      	orrs	r3, r1
 800040e:	6013      	str	r3, [r2, #0]
	GPIOC->ODR &= ~(1 << RED_LED_PIN);
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <main+0x120>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <main+0x124>)
 8000416:	7812      	ldrb	r2, [r2, #0]
 8000418:	4611      	mov	r1, r2
 800041a:	2201      	movs	r2, #1
 800041c:	408a      	lsls	r2, r1
 800041e:	43d2      	mvns	r2, r2
 8000420:	4611      	mov	r1, r2
 8000422:	4a06      	ldr	r2, [pc, #24]	; (800043c <main+0x120>)
 8000424:	400b      	ands	r3, r1
 8000426:	6153      	str	r3, [r2, #20]

	SysTick_Config(SysTicks); //SysTick Enable and configuration
 8000428:	f242 4075 	movw	r0, #9333	; 0x2475
 800042c:	f7ff ff14 	bl	8000258 <SysTick_Config>

	while(1){
 8000430:	e7fe      	b.n	8000430 <main+0x114>
 8000432:	bf00      	nop
 8000434:	40023c00 	.word	0x40023c00
 8000438:	40023800 	.word	0x40023800
 800043c:	40020800 	.word	0x40020800
 8000440:	20000000 	.word	0x20000000

08000444 <Reset_Handler>:
 8000444:	480d      	ldr	r0, [pc, #52]	; (800047c <LoopForever+0x2>)
 8000446:	4685      	mov	sp, r0
 8000448:	480d      	ldr	r0, [pc, #52]	; (8000480 <LoopForever+0x6>)
 800044a:	490e      	ldr	r1, [pc, #56]	; (8000484 <LoopForever+0xa>)
 800044c:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <LoopForever+0xe>)
 800044e:	2300      	movs	r3, #0
 8000450:	e002      	b.n	8000458 <LoopCopyDataInit>

08000452 <CopyDataInit>:
 8000452:	58d4      	ldr	r4, [r2, r3]
 8000454:	50c4      	str	r4, [r0, r3]
 8000456:	3304      	adds	r3, #4

08000458 <LoopCopyDataInit>:
 8000458:	18c4      	adds	r4, r0, r3
 800045a:	428c      	cmp	r4, r1
 800045c:	d3f9      	bcc.n	8000452 <CopyDataInit>
 800045e:	4a0b      	ldr	r2, [pc, #44]	; (800048c <LoopForever+0x12>)
 8000460:	4c0b      	ldr	r4, [pc, #44]	; (8000490 <LoopForever+0x16>)
 8000462:	2300      	movs	r3, #0
 8000464:	e001      	b.n	800046a <LoopFillZerobss>

08000466 <FillZerobss>:
 8000466:	6013      	str	r3, [r2, #0]
 8000468:	3204      	adds	r2, #4

0800046a <LoopFillZerobss>:
 800046a:	42a2      	cmp	r2, r4
 800046c:	d3fb      	bcc.n	8000466 <FillZerobss>
 800046e:	f3af 8000 	nop.w
 8000472:	f000 f811 	bl	8000498 <__libc_init_array>
 8000476:	f7ff ff51 	bl	800031c <main>

0800047a <LoopForever>:
 800047a:	e7fe      	b.n	800047a <LoopForever>
 800047c:	20020000 	.word	0x20020000
 8000480:	20000000 	.word	0x20000000
 8000484:	20000004 	.word	0x20000004
 8000488:	08000500 	.word	0x08000500
 800048c:	20000004 	.word	0x20000004
 8000490:	20000028 	.word	0x20000028

08000494 <ADC_IRQHandler>:
 8000494:	e7fe      	b.n	8000494 <ADC_IRQHandler>
	...

08000498 <__libc_init_array>:
 8000498:	b570      	push	{r4, r5, r6, lr}
 800049a:	4e0d      	ldr	r6, [pc, #52]	; (80004d0 <__libc_init_array+0x38>)
 800049c:	4c0d      	ldr	r4, [pc, #52]	; (80004d4 <__libc_init_array+0x3c>)
 800049e:	1ba4      	subs	r4, r4, r6
 80004a0:	10a4      	asrs	r4, r4, #2
 80004a2:	2500      	movs	r5, #0
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	d109      	bne.n	80004bc <__libc_init_array+0x24>
 80004a8:	4e0b      	ldr	r6, [pc, #44]	; (80004d8 <__libc_init_array+0x40>)
 80004aa:	4c0c      	ldr	r4, [pc, #48]	; (80004dc <__libc_init_array+0x44>)
 80004ac:	f000 f818 	bl	80004e0 <_init>
 80004b0:	1ba4      	subs	r4, r4, r6
 80004b2:	10a4      	asrs	r4, r4, #2
 80004b4:	2500      	movs	r5, #0
 80004b6:	42a5      	cmp	r5, r4
 80004b8:	d105      	bne.n	80004c6 <__libc_init_array+0x2e>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004c0:	4798      	blx	r3
 80004c2:	3501      	adds	r5, #1
 80004c4:	e7ee      	b.n	80004a4 <__libc_init_array+0xc>
 80004c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004ca:	4798      	blx	r3
 80004cc:	3501      	adds	r5, #1
 80004ce:	e7f2      	b.n	80004b6 <__libc_init_array+0x1e>
 80004d0:	080004f8 	.word	0x080004f8
 80004d4:	080004f8 	.word	0x080004f8
 80004d8:	080004f8 	.word	0x080004f8
 80004dc:	080004fc 	.word	0x080004fc

080004e0 <_init>:
 80004e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e2:	bf00      	nop
 80004e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e6:	bc08      	pop	{r3}
 80004e8:	469e      	mov	lr, r3
 80004ea:	4770      	bx	lr

080004ec <_fini>:
 80004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ee:	bf00      	nop
 80004f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f2:	bc08      	pop	{r3}
 80004f4:	469e      	mov	lr, r3
 80004f6:	4770      	bx	lr

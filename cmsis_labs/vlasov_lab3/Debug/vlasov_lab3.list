
vlasov_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000448  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800060c  0800060c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800060c  0800060c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800060c  0800060c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800060c  0800060c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800060c  0800060c  0001060c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000610  08000610  00010610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000614  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000618  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000618  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001362  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002be  00000000  00000000  00021396  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000070  00000000  00000000  00021658  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000058  00000000  00000000  000216c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001939b  00000000  00000000  00021720  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000006bd  00000000  00000000  0003aabb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e656  00000000  00000000  0003b178  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c97ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000110  00000000  00000000  000c984c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080005f4 	.word	0x080005f4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080005f4 	.word	0x080005f4

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	; (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	6039      	str	r1, [r7, #0]
 800024a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800024c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000250:	2b00      	cmp	r3, #0
 8000252:	db0a      	blt.n	800026a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	b2da      	uxtb	r2, r3
 8000258:	490c      	ldr	r1, [pc, #48]	; (800028c <__NVIC_SetPriority+0x4c>)
 800025a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025e:	0112      	lsls	r2, r2, #4
 8000260:	b2d2      	uxtb	r2, r2
 8000262:	440b      	add	r3, r1
 8000264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000268:	e00a      	b.n	8000280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4908      	ldr	r1, [pc, #32]	; (8000290 <__NVIC_SetPriority+0x50>)
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	f003 030f 	and.w	r3, r3, #15
 8000276:	3b04      	subs	r3, #4
 8000278:	0112      	lsls	r2, r2, #4
 800027a:	b2d2      	uxtb	r2, r2
 800027c:	440b      	add	r3, r1
 800027e:	761a      	strb	r2, [r3, #24]
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	e000e100 	.word	0xe000e100
 8000290:	e000ed00 	.word	0xe000ed00

08000294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3b01      	subs	r3, #1
 80002a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002a4:	d301      	bcc.n	80002aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80002a6:	2301      	movs	r3, #1
 80002a8:	e00f      	b.n	80002ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002aa:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <SysTick_Config+0x40>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80002b2:	210f      	movs	r1, #15
 80002b4:	f04f 30ff 	mov.w	r0, #4294967295
 80002b8:	f7ff ffc2 	bl	8000240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <SysTick_Config+0x40>)
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002c2:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <SysTick_Config+0x40>)
 80002c4:	2207      	movs	r2, #7
 80002c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002c8:	2300      	movs	r3, #0
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	e000e010 	.word	0xe000e010

080002d8 <ClocksInit>:
uint8_t state = 0;

#define APB1_FREQ 35000000
#define BAUDRATE 115200

void ClocksInit(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	/*1. Set flash latency*/
	FLASH->ACR=FLASH_ACR_LATENCY_4WS;
 80002dc:	4b44      	ldr	r3, [pc, #272]	; (80003f0 <ClocksInit+0x118>)
 80002de:	2204      	movs	r2, #4
 80002e0:	601a      	str	r2, [r3, #0]

	/*2. Enable hse and wait until it's ready*/
	RCC->CR |= (1 << 16); // 16s bit
 80002e2:	4b44      	ldr	r3, [pc, #272]	; (80003f4 <ClocksInit+0x11c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a43      	ldr	r2, [pc, #268]	; (80003f4 <ClocksInit+0x11c>)
 80002e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ec:	6013      	str	r3, [r2, #0]
	while( !(RCC->CR & (1 << 17)) ){} // 17s bit
 80002ee:	bf00      	nop
 80002f0:	4b40      	ldr	r3, [pc, #256]	; (80003f4 <ClocksInit+0x11c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d0f9      	beq.n	80002f0 <ClocksInit+0x18>

	/*3. Set AHB, APB1 & APB2 prescaler*/
	//HPRE
	//RCC->CFGR |= (1 << 4); //4 bit
	RCC->CFGR &= ~(RCC_CFGR_HPRE_Msk); // AHB_presc = 1
 80002fc:	4b3d      	ldr	r3, [pc, #244]	; (80003f4 <ClocksInit+0x11c>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	4a3c      	ldr	r2, [pc, #240]	; (80003f4 <ClocksInit+0x11c>)
 8000302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000306:	6093      	str	r3, [r2, #8]
	//PPRE1
	RCC->CFGR |= (0b101 << 10); //presc = 4
 8000308:	4b3a      	ldr	r3, [pc, #232]	; (80003f4 <ClocksInit+0x11c>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	4a39      	ldr	r2, [pc, #228]	; (80003f4 <ClocksInit+0x11c>)
 800030e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000312:	6093      	str	r3, [r2, #8]
	//PPRE2
	RCC->CFGR |= (0b100 << 13); //presc = 2
 8000314:	4b37      	ldr	r3, [pc, #220]	; (80003f4 <ClocksInit+0x11c>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a36      	ldr	r2, [pc, #216]	; (80003f4 <ClocksInit+0x11c>)
 800031a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800031e:	6093      	str	r3, [r2, #8]

	/*4. Config PLL*/
	// Set PLL source (HSE)
	RCC->PLLCFGR |= (1 << 22);
 8000320:	4b34      	ldr	r3, [pc, #208]	; (80003f4 <ClocksInit+0x11c>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	4a33      	ldr	r2, [pc, #204]	; (80003f4 <ClocksInit+0x11c>)
 8000326:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800032a:	6053      	str	r3, [r2, #4]
	// Set PLLM
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM_Msk);
 800032c:	4b31      	ldr	r3, [pc, #196]	; (80003f4 <ClocksInit+0x11c>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	4a30      	ldr	r2, [pc, #192]	; (80003f4 <ClocksInit+0x11c>)
 8000332:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000336:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (20 << 0);
 8000338:	4b2e      	ldr	r3, [pc, #184]	; (80003f4 <ClocksInit+0x11c>)
 800033a:	685b      	ldr	r3, [r3, #4]
 800033c:	4a2d      	ldr	r2, [pc, #180]	; (80003f4 <ClocksInit+0x11c>)
 800033e:	f043 0314 	orr.w	r3, r3, #20
 8000342:	6053      	str	r3, [r2, #4]
	// Set PLLN
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN_Msk);
 8000344:	4b2b      	ldr	r3, [pc, #172]	; (80003f4 <ClocksInit+0x11c>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	4a2a      	ldr	r2, [pc, #168]	; (80003f4 <ClocksInit+0x11c>)
 800034a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800034e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000352:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (280 << 6);
 8000354:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <ClocksInit+0x11c>)
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	4a26      	ldr	r2, [pc, #152]	; (80003f4 <ClocksInit+0x11c>)
 800035a:	f443 438c 	orr.w	r3, r3, #17920	; 0x4600
 800035e:	6053      	str	r3, [r2, #4]
	// Set PLLP
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP_Msk);
 8000360:	4b24      	ldr	r3, [pc, #144]	; (80003f4 <ClocksInit+0x11c>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	4a23      	ldr	r2, [pc, #140]	; (80003f4 <ClocksInit+0x11c>)
 8000366:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800036a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0 << 16); // presc = 2
 800036c:	4b21      	ldr	r3, [pc, #132]	; (80003f4 <ClocksInit+0x11c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <ClocksInit+0x11c>)
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	6053      	str	r3, [r2, #4]
	//Enable PLL and wait until it starts
	RCC->CR |= (1 << 24);
 8000374:	4b1f      	ldr	r3, [pc, #124]	; (80003f4 <ClocksInit+0x11c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <ClocksInit+0x11c>)
 800037a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800037e:	6013      	str	r3, [r2, #0]
	while( !(RCC->CR & (1 << 25)) ){}
 8000380:	bf00      	nop
 8000382:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <ClocksInit+0x11c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f9      	beq.n	8000382 <ClocksInit+0xaa>

	/*5. Set main clock switch to PLL source.
	 * Check, that the switch moves to the correct source.*/
	RCC->CFGR |= (2 << 0);
 800038e:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <ClocksInit+0x11c>)
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	4a18      	ldr	r2, [pc, #96]	; (80003f4 <ClocksInit+0x11c>)
 8000394:	f043 0302 	orr.w	r3, r3, #2
 8000398:	6093      	str	r3, [r2, #8]
	while( !(RCC->CFGR & (2 << 2) )){}
 800039a:	bf00      	nop
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <ClocksInit+0x11c>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	f003 0308 	and.w	r3, r3, #8
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d0f9      	beq.n	800039c <ClocksInit+0xc4>


	// GPIOC_EN and GPIOA_EN
	RCC->AHB1ENR |= (1 << 2) | (1 << 0);
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <ClocksInit+0x11c>)
 80003aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ac:	4a11      	ldr	r2, [pc, #68]	; (80003f4 <ClocksInit+0x11c>)
 80003ae:	f043 0305 	orr.w	r3, r3, #5
 80003b2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER |= (1 << RED_LED_PIN*2);
 80003b4:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <ClocksInit+0x120>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a10      	ldr	r2, [pc, #64]	; (80003fc <ClocksInit+0x124>)
 80003ba:	7812      	ldrb	r2, [r2, #0]
 80003bc:	0052      	lsls	r2, r2, #1
 80003be:	2101      	movs	r1, #1
 80003c0:	fa01 f202 	lsl.w	r2, r1, r2
 80003c4:	4611      	mov	r1, r2
 80003c6:	4a0c      	ldr	r2, [pc, #48]	; (80003f8 <ClocksInit+0x120>)
 80003c8:	430b      	orrs	r3, r1
 80003ca:	6013      	str	r3, [r2, #0]
	GPIOC->ODR &= ~(1 << RED_LED_PIN);
 80003cc:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <ClocksInit+0x120>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <ClocksInit+0x124>)
 80003d2:	7812      	ldrb	r2, [r2, #0]
 80003d4:	4611      	mov	r1, r2
 80003d6:	2201      	movs	r2, #1
 80003d8:	408a      	lsls	r2, r1
 80003da:	43d2      	mvns	r2, r2
 80003dc:	4611      	mov	r1, r2
 80003de:	4a06      	ldr	r2, [pc, #24]	; (80003f8 <ClocksInit+0x120>)
 80003e0:	400b      	ands	r3, r1
 80003e2:	6153      	str	r3, [r2, #20]

	SysTick_Config(SysTicks); //SysTick Enable and configuration
 80003e4:	f242 4075 	movw	r0, #9333	; 0x2475
 80003e8:	f7ff ff54 	bl	8000294 <SysTick_Config>
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40023c00 	.word	0x40023c00
 80003f4:	40023800 	.word	0x40023800
 80003f8:	40020800 	.word	0x40020800
 80003fc:	20000000 	.word	0x20000000

08000400 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
	//4.	Create a function - USART interrupts handler.

	uint8_t read_char = USART2->DR;
 8000406:	4b35      	ldr	r3, [pc, #212]	; (80004dc <USART2_IRQHandler+0xdc>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	71fb      	strb	r3, [r7, #7]
		state = 1;
	} else if (read_char == 'N'){
		USART2->DR = b;
	}*/

	switch (read_char) {
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	2b45      	cmp	r3, #69	; 0x45
 8000410:	d02a      	beq.n	8000468 <USART2_IRQHandler+0x68>
 8000412:	2b45      	cmp	r3, #69	; 0x45
 8000414:	dc02      	bgt.n	800041c <USART2_IRQHandler+0x1c>
 8000416:	2b3d      	cmp	r3, #61	; 0x3d
 8000418:	d01b      	beq.n	8000452 <USART2_IRQHandler+0x52>
 800041a:	e030      	b.n	800047e <USART2_IRQHandler+0x7e>
 800041c:	2b4e      	cmp	r3, #78	; 0x4e
 800041e:	d002      	beq.n	8000426 <USART2_IRQHandler+0x26>
 8000420:	2b78      	cmp	r3, #120	; 0x78
 8000422:	d00b      	beq.n	800043c <USART2_IRQHandler+0x3c>
 8000424:	e02b      	b.n	800047e <USART2_IRQHandler+0x7e>
	case 'N':
		if (state == 0){
 8000426:	4b2e      	ldr	r3, [pc, #184]	; (80004e0 <USART2_IRQHandler+0xe0>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d146      	bne.n	80004bc <USART2_IRQHandler+0xbc>
			state = 1;
 800042e:	4b2c      	ldr	r3, [pc, #176]	; (80004e0 <USART2_IRQHandler+0xe0>)
 8000430:	2201      	movs	r2, #1
 8000432:	701a      	strb	r2, [r3, #0]
			USART2->DR = read_char;
 8000434:	4a29      	ldr	r2, [pc, #164]	; (80004dc <USART2_IRQHandler+0xdc>)
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	6053      	str	r3, [r2, #4]
		}
		break;
 800043a:	e03f      	b.n	80004bc <USART2_IRQHandler+0xbc>
	case 'x':
		if (state == 1){
 800043c:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <USART2_IRQHandler+0xe0>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d13d      	bne.n	80004c0 <USART2_IRQHandler+0xc0>
			state = 2 ;
 8000444:	4b26      	ldr	r3, [pc, #152]	; (80004e0 <USART2_IRQHandler+0xe0>)
 8000446:	2202      	movs	r2, #2
 8000448:	701a      	strb	r2, [r3, #0]
			USART2->DR = read_char;
 800044a:	4a24      	ldr	r2, [pc, #144]	; (80004dc <USART2_IRQHandler+0xdc>)
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	6053      	str	r3, [r2, #4]
		}
		break;
 8000450:	e036      	b.n	80004c0 <USART2_IRQHandler+0xc0>
	case '=':
		if (state == 2){
 8000452:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <USART2_IRQHandler+0xe0>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b02      	cmp	r3, #2
 8000458:	d134      	bne.n	80004c4 <USART2_IRQHandler+0xc4>
					state = 3 ;
 800045a:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <USART2_IRQHandler+0xe0>)
 800045c:	2203      	movs	r2, #3
 800045e:	701a      	strb	r2, [r3, #0]
					USART2->DR = read_char;
 8000460:	4a1e      	ldr	r2, [pc, #120]	; (80004dc <USART2_IRQHandler+0xdc>)
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	6053      	str	r3, [r2, #4]
		}
		break;
 8000466:	e02d      	b.n	80004c4 <USART2_IRQHandler+0xc4>
	case 'E':
		if (state == 5){
 8000468:	4b1d      	ldr	r3, [pc, #116]	; (80004e0 <USART2_IRQHandler+0xe0>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b05      	cmp	r3, #5
 800046e:	d12b      	bne.n	80004c8 <USART2_IRQHandler+0xc8>
					state = 0;
 8000470:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <USART2_IRQHandler+0xe0>)
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
					USART2->DR = read_char;
 8000476:	4a19      	ldr	r2, [pc, #100]	; (80004dc <USART2_IRQHandler+0xdc>)
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	6053      	str	r3, [r2, #4]
		}
		break;
 800047c:	e024      	b.n	80004c8 <USART2_IRQHandler+0xc8>

	default:
		if (state == 3){
 800047e:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <USART2_IRQHandler+0xe0>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b03      	cmp	r3, #3
 8000484:	d10b      	bne.n	800049e <USART2_IRQHandler+0x9e>
			var = (uint8_t)read_char * 10;
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	461a      	mov	r2, r3
 800048a:	0092      	lsls	r2, r2, #2
 800048c:	4413      	add	r3, r2
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	b2da      	uxtb	r2, r3
 8000492:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <USART2_IRQHandler+0xe4>)
 8000494:	701a      	strb	r2, [r3, #0]
			USART2->DR = read_char;
 8000496:	4a11      	ldr	r2, [pc, #68]	; (80004dc <USART2_IRQHandler+0xdc>)
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	6053      	str	r3, [r2, #4]
		} else if (state == 4){
			USART2->DR = read_char;
			var = var + (uint8_t)read_char;
			//USART2->DR = var;
		}
		break;
 800049c:	e016      	b.n	80004cc <USART2_IRQHandler+0xcc>
		} else if (state == 4){
 800049e:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <USART2_IRQHandler+0xe0>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b04      	cmp	r3, #4
 80004a4:	d112      	bne.n	80004cc <USART2_IRQHandler+0xcc>
			USART2->DR = read_char;
 80004a6:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <USART2_IRQHandler+0xdc>)
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	6053      	str	r3, [r2, #4]
			var = var + (uint8_t)read_char;
 80004ac:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <USART2_IRQHandler+0xe4>)
 80004ae:	781a      	ldrb	r2, [r3, #0]
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	4413      	add	r3, r2
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <USART2_IRQHandler+0xe4>)
 80004b8:	701a      	strb	r2, [r3, #0]
		break;
 80004ba:	e007      	b.n	80004cc <USART2_IRQHandler+0xcc>
		break;
 80004bc:	bf00      	nop
 80004be:	e006      	b.n	80004ce <USART2_IRQHandler+0xce>
		break;
 80004c0:	bf00      	nop
 80004c2:	e004      	b.n	80004ce <USART2_IRQHandler+0xce>
		break;
 80004c4:	bf00      	nop
 80004c6:	e002      	b.n	80004ce <USART2_IRQHandler+0xce>
		break;
 80004c8:	bf00      	nop
 80004ca:	e000      	b.n	80004ce <USART2_IRQHandler+0xce>
		break;
 80004cc:	bf00      	nop
	}
	//NVIC_EnableIRQ(USART2_IRQn);
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40004400 	.word	0x40004400
 80004e0:	20000021 	.word	0x20000021
 80004e4:	20000020 	.word	0x20000020

080004e8 <main>:

int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	// 0. Set Clocks
	ClocksInit();
 80004ec:	f7ff fef4 	bl	80002d8 <ClocksInit>

	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <main+0x64>)
 80004f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f4:	4a15      	ldr	r2, [pc, #84]	; (800054c <main+0x64>)
 80004f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fa:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOA->MODER |= 2 << GPIO_MODER_MODER2_Pos;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <main+0x68>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a13      	ldr	r2, [pc, #76]	; (8000550 <main+0x68>)
 8000502:	f043 0320 	orr.w	r3, r3, #32
 8000506:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 2 << GPIO_MODER_MODER3_Pos;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <main+0x68>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a10      	ldr	r2, [pc, #64]	; (8000550 <main+0x68>)
 800050e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000512:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= 7 << GPIO_AFRL_AFSEL2_Pos;
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <main+0x68>)
 8000516:	6a1b      	ldr	r3, [r3, #32]
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <main+0x68>)
 800051a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800051e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7 << GPIO_AFRL_AFSEL3_Pos;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <main+0x68>)
 8000522:	6a1b      	ldr	r3, [r3, #32]
 8000524:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <main+0x68>)
 8000526:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800052a:	6213      	str	r3, [r2, #32]

	// 1. Set USART2 baudrate
	USART2->BRR = APB1_FREQ / BAUDRATE;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <main+0x6c>)
 800052e:	f240 122f 	movw	r2, #303	; 0x12f
 8000532:	609a      	str	r2, [r3, #8]
	/* 2. Configure USART to receive and
	* transmit data, generate the required
	* interrupt. */
	USART2->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE/* | USART_CR1_TXEIE*/;
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <main+0x6c>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <main+0x6c>)
 800053a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800053e:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8000542:	60d3      	str	r3, [r2, #12]
	// 3. Enable interrupts in the interrupt controller.
	NVIC_EnableIRQ(USART2_IRQn);
 8000544:	2026      	movs	r0, #38	; 0x26
 8000546:	f7ff fe5d 	bl	8000204 <__NVIC_EnableIRQ>

	while(1){
 800054a:	e7fe      	b.n	800054a <main+0x62>
 800054c:	40023800 	.word	0x40023800
 8000550:	40020000 	.word	0x40020000
 8000554:	40004400 	.word	0x40004400

08000558 <Reset_Handler>:
 8000558:	480d      	ldr	r0, [pc, #52]	; (8000590 <LoopForever+0x2>)
 800055a:	4685      	mov	sp, r0
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <LoopForever+0x6>)
 800055e:	490e      	ldr	r1, [pc, #56]	; (8000598 <LoopForever+0xa>)
 8000560:	4a0e      	ldr	r2, [pc, #56]	; (800059c <LoopForever+0xe>)
 8000562:	2300      	movs	r3, #0
 8000564:	e002      	b.n	800056c <LoopCopyDataInit>

08000566 <CopyDataInit>:
 8000566:	58d4      	ldr	r4, [r2, r3]
 8000568:	50c4      	str	r4, [r0, r3]
 800056a:	3304      	adds	r3, #4

0800056c <LoopCopyDataInit>:
 800056c:	18c4      	adds	r4, r0, r3
 800056e:	428c      	cmp	r4, r1
 8000570:	d3f9      	bcc.n	8000566 <CopyDataInit>
 8000572:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <LoopForever+0x12>)
 8000574:	4c0b      	ldr	r4, [pc, #44]	; (80005a4 <LoopForever+0x16>)
 8000576:	2300      	movs	r3, #0
 8000578:	e001      	b.n	800057e <LoopFillZerobss>

0800057a <FillZerobss>:
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	3204      	adds	r2, #4

0800057e <LoopFillZerobss>:
 800057e:	42a2      	cmp	r2, r4
 8000580:	d3fb      	bcc.n	800057a <FillZerobss>
 8000582:	f3af 8000 	nop.w
 8000586:	f000 f811 	bl	80005ac <__libc_init_array>
 800058a:	f7ff ffad 	bl	80004e8 <main>

0800058e <LoopForever>:
 800058e:	e7fe      	b.n	800058e <LoopForever>
 8000590:	20020000 	.word	0x20020000
 8000594:	20000000 	.word	0x20000000
 8000598:	20000004 	.word	0x20000004
 800059c:	08000614 	.word	0x08000614
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000024 	.word	0x20000024

080005a8 <ADC_IRQHandler>:
 80005a8:	e7fe      	b.n	80005a8 <ADC_IRQHandler>
	...

080005ac <__libc_init_array>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	4e0d      	ldr	r6, [pc, #52]	; (80005e4 <__libc_init_array+0x38>)
 80005b0:	4c0d      	ldr	r4, [pc, #52]	; (80005e8 <__libc_init_array+0x3c>)
 80005b2:	1ba4      	subs	r4, r4, r6
 80005b4:	10a4      	asrs	r4, r4, #2
 80005b6:	2500      	movs	r5, #0
 80005b8:	42a5      	cmp	r5, r4
 80005ba:	d109      	bne.n	80005d0 <__libc_init_array+0x24>
 80005bc:	4e0b      	ldr	r6, [pc, #44]	; (80005ec <__libc_init_array+0x40>)
 80005be:	4c0c      	ldr	r4, [pc, #48]	; (80005f0 <__libc_init_array+0x44>)
 80005c0:	f000 f818 	bl	80005f4 <_init>
 80005c4:	1ba4      	subs	r4, r4, r6
 80005c6:	10a4      	asrs	r4, r4, #2
 80005c8:	2500      	movs	r5, #0
 80005ca:	42a5      	cmp	r5, r4
 80005cc:	d105      	bne.n	80005da <__libc_init_array+0x2e>
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005d4:	4798      	blx	r3
 80005d6:	3501      	adds	r5, #1
 80005d8:	e7ee      	b.n	80005b8 <__libc_init_array+0xc>
 80005da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005de:	4798      	blx	r3
 80005e0:	3501      	adds	r5, #1
 80005e2:	e7f2      	b.n	80005ca <__libc_init_array+0x1e>
 80005e4:	0800060c 	.word	0x0800060c
 80005e8:	0800060c 	.word	0x0800060c
 80005ec:	0800060c 	.word	0x0800060c
 80005f0:	08000610 	.word	0x08000610

080005f4 <_init>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	bf00      	nop
 80005f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fa:	bc08      	pop	{r3}
 80005fc:	469e      	mov	lr, r3
 80005fe:	4770      	bx	lr

08000600 <_fini>:
 8000600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000602:	bf00      	nop
 8000604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000606:	bc08      	pop	{r3}
 8000608:	469e      	mov	lr, r3
 800060a:	4770      	bx	lr
